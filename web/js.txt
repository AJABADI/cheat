# brower console
console.FUN()
log()


# missing values
t = NaN
isNaN(t)
isNaN([0, NaN, 1]) == true
typeof(t) == 'undefined'
v = possibly_missing || default_value
v = x || 10

# string functions
s = 'string'
parseInt('1')
parseFloat('1.2')
replace(what, by) // only first occurrence
function replaceAll(find, replace, str) {
  return str.replace(new RegExp(find, 'g'), replace);
}


# json
* keys and strings most be quoted
* "quote", not 'quote'!
{"a": 10, "b": "string"}
var d = {a: 10, b: 'string'};
  * unquoted keys supported
  * '' quotes supported
o = JSON.parse(str) // string to JSON


# style
fill, 'red'
border, '1px solid black'


# functions
function fun(a, b) { return a; }
function fun(a, optional) {
  if (typeof(optional) == 'undefined') {
    opional = 10;
  }
}

# var
var a = 1;  // local
a = 1;  // global


# list
var l = [1, 2, 3]
l.push(x)
l.pop()
l = l.concat(l2)  // add elements of other list
l.join(',') // join elements by separator
l.length
l.forEach(function(d, i) {
  d = 10  // won't change value!
  l[i] = 10 // will change value!
})
l.map(function(x) x+2)
l.filter(function(x) x > 2)
for (index in list) {
  console.log(list[index])
}
ll = l.slice(0) // copy list


# dict, hash, Object initializer
d = {'key': value, 'key2': value2}
d.key
Object.keys(d)  // get keys
for (key in dict) {
  console.log(dict[key])
}
key in dict // check if key exists
oo = eval(uneval(o))  // copy



# Math
random()  // rnd [0; 1]
round()
sin(), cos()
Infinity  // inf, maximum

is_true ? yes : no  // ternary operator


# type
typeof(var) // object
typeof(var) == 'undefined'  // check if undefined
var instanceof class // true, false

# switch, case
switch (value) {
  case 1:
    code;
    break
 default:
  code;
}
