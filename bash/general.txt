# Redirection
echo Foo 1>&2 // stdout to error
1>&2 echo foo 1>&2 // same as before
1>&2 cat file

# Multi-line string
var="line1\n
line2\n
line3"
cat <<- EOF
line1
line1
EOF


# Show linux version
cat /proc/version
cat /etc/redhat-release

# chmod, chown
-R  // recursively

# date
date '+%y%m%d_%H%M%S'

# loop over stdin
cmd | while read line; do

# services / demons
service NAME COMMAND
  stop
  start
  restart
service --status-all // list all services

# open ports
sudo netstat -tulpn

# File operations
dirname $file
basename $file
readlink -f $file // absolute path; resolve symbolic links
realpath $file  // on MAC; external program

# Arrays
a = (one two three)
${a[0]} // first element
${a[*]} // all elements
${#a[*]}  // length

## Accessing elements of list
1)
l="l1 l2 l3"
a=($l)
echo ${a[i]}
2)
set -- $l
echo $1


# Parameter Expansion
man bash -> Parameter Expansion
${!v*}  // expand variable name
${v:-value} // assign value if undefined
${v:?msg}  // print msg if unset
${file.tar.gz%.*} // file.tar
${file.tar.gz%%.*} // file
${file.tar.gz#*.} // tar.gz
${file.tar.gz##*.} // gz
${#s} // length
${s:from:length}  // substr
${s/pattern/replace}
sadasd


# History expansion
* man bash -> HISTORY EXPANSION
history // last last commands

# Parameter Expansion
man bash -> Parameter Expansion

## Event designator
!id // execute command with id
!!  // last command
!-1 // last command
!-n // n last command
!str  // last command starting with string

## Word designator
EVENT:WORD  // !!:WORD
!!^ // first argument last command
!!$ // last argument last command
!!:n  // nth word
!!:n-$  // nth - end
!!:n*  // nth - end


# Removing first / last line
head -n x   // first x lines
tail -n x   // first x lines
tail -n +x  // everything from line x

# Debugging
set -e  // exit on error
bash -x file.sh // print executed command

# ssh
ssh-genkey
ssh-copy-id host


# File system
mount // show file system
df  // show statistics about file system
fdisk // partitions
diskutil info /Volumns/hdd





# variables
* $0: script name
* $$: process id
* $!: id of last process ran in background
* $?: return value



# convert
* convert IN OUT
* -density 300 // 300 dpi
* -resize 50%
* - size 400x100
* convert -delay 50 *.png animation.gif



# od (octal dump)
* od -t c // translate to character
* od -t d1  // translate one byte to signed integer
* od -t u1  // translate one byte to unsigned integer
* od -t x1  // translate one byte to hex
* od -t dI  // translate four bytes to integer
* od -t c -t u1 // translate to character and unsigned integer



# hd (hexdump) -> better use od
* hd -c // character
* hd -b // byte


# color output
GREEN=$(tput setaf 2; tput bold)
YELLOW=$(tput setaf 3)
RED=$(tput setaf 1)
echo -e "$RED Hello world"
