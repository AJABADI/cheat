# Show linux version
cat /proc/version

# nice
nice -n 10  // decrease priority
nice -n -10  // increase priority
nice -n [-20;20]

# chmod, chown
-R  // recursively

# date
date '+%y%m%d_%H%M%S'

# loop over stdin
cmd | while read line; do

# services / demons
service NAME COMMAND
  stop
  start
  restart

# open ports
sudo netstat -tulpn

# File operations
dirname $file
basename $file
readlink -f $file // absolute path; resolve symbolic links
realpath $file  // on MAC; external program

# Arrays
a = (one two three)
${a[*]}
${a[0]}
${#a[*]}  // length

# Parameter Expansion
man bash -> Parameter Expansion
${!v*}  // expand variable name
${v:-value} // assign value if undefined
${v:?msg}  // print msg if unset
${file.tar.gz%.*} // file.tar
${file.tar.gz%%.*} // file
${file.tar.gz#*.} // tar.gz
${file.tar.gz##*.} // gz
${#s} // length
${s:from:length}  // substr
${s/pattern/replace}
sadasd


# History expansion
* man bash -> HISTORY EXPANSION
history // last last commands

# Parameter Expansion
man bash -> Parameter Expansion

## Event designator
!id // execute command with id
!!  // last command
!-1 // last command
!-n // n last command
!str  // last command starting with string

## Word designator
EVENT:WORD  // !!:WORD
!!^ // first argument last command
!!$ // last argument last command
!!:n  // nth word
!!:n-$  // nth - end
!!:n*  // nth - end


# Removing first / last line
head -n x   // first x lines
tail -n x   // first x lines
tail -n +x  // everything from line x

# cut
cut file
-d  \t // delimiter
-f a-b  // range
-f a-

# Debugging
set -e  // exit on error
bash -x file.sh // print executed command

# ssh
ssh-genkey
ssh-copy-id host

# ftp
ftp ftp://ftpusr43:0afwmRLv@ftp2.babraham.ac.uk
ftp ftp://user:pass@host
ftp host  // starts prompt for user and pass (on EBI)
ls
put local_file  // upload local file
mput *.txt  // upload multiple files
get remote_file // download remove file
delete remote_file
quit



# rsync
-a  // archive mode: preserve user, permissions, ...
-z  // compress for transfer
-v  // verbose

# File system
mount // show file system
df  // show statistics about file system
fdisk // partitions
diskutil info /Volumns/hdd


# tree
* -L  maxlevels
* -d  // only directories
* -a  // all files
* --prune // do not show empty dirs
* -P pattern  // only files matching pattern
* -s, -h  // size (human readable)
* -p  // ls -l


# find
-name file.h  // only match filename
-name "?il*.[ho]" // ?, *, [] are special characters
-path pattern // match complete path
-path "*/src" // all src directories
-regex "*/.EADME" // emacs regex whole path
-type df  // directory of file
-not -path '*/\.*'  // exclude hidden directories
-exec
-delete
-ls





# misc commands
* uptime  // displays uptime and CPU load
* tr SET SET  // translate characters
  * tr -d SET // delete characters
  * tr -s SET // sequence set of consecutive characters
* readlink -f FILE  // get absolute path
* ldd [binary]  // prints shared libraries [binary] depends on
* uniq -c // count # unique words
* ctrl - \ // interrupt command



# variables
* $0: script name
* $$: process id
* $!: id of last process ran in background
* $?: return value



# convert
* convert IN OUT
* -density 300 // 300 dpi
* -resize 50%
* - size 400x100
* convert -delay 50 *.png animation.gif



# od (octal dump)
* od -t c // translate to character
* od -t d1  // translate one byte to signed integer
* od -t u1  // translate one byte to unsigned integer
* od -t x1  // translate one byte to hex
* od -t dI  // translate four bytes to integer
* od -t c -t u1 // translate to character and unsigned integer



# hd (hexdump) -> better use od
* hd -c // character
* hd -b // byte




# color output
GREEN=$(tput setaf 2; tput bold)
YELLOW=$(tput setaf 3)
RED=$(tput setaf 1)
echo -e "$RED Hello world"
