# diff files
1) open files in windows (vert/hor)
2) execute :diffthis in both windows (:windo diffthis)
dp  // diff put
do  // diff obtain
vimdiff files+
\D  // diff windows

# Mark
m[a-z]  // set mark in current file
m[A-Z]  // set global mark -> saved on exit file
'[a-zA-Z] // go to LINE of mark
`[a-zA-Z] // to to position of mark
d'a // delete until mark
d`a // delete until position mark
`.  // go to last edited position
`0  // go to last edited file
`1  // go to 2nd last edited file
``  // jump back
:marks  // list all marks
:marks A, B // list selected marks


# Motions / nagivation
_ // to beginning of line
g_  // to end of line
H // cursor to head of page
M // cursor to middle of page
L // cursor to bottom of page
zt  // current line to top
zz  // current line to center
zb  // current line to botton

# Moving lines/parts
:m lineno
:m 0  // to beginning of doc
:m $  // to end of doc




# Command completion
:help ins-completion
c-p // previous
c-n // next
c-y // accept (yes)
c-e // end completion
c-l // delete last character

# vimgrep
* case depends on ignorecase
:vimgrep word file1 file2 ...
:vimgrep word f*
:vimgrep/pattern/[jg] f*
  j // do not jump to first match
  g // add line only once
:vimgrep/pattern/[jg] **/*.py // search recursively


# Range, positioning
x, y // absolute line numbers
. // current line
.+1 // add 1 to current line
.-1 // add -1 to current line
$ // end of file
% // the entire file
?pattern? // from pattern
/pattern/ // to pattern
?pattern?,. // copy from pattern to current line
:x  // go to line x
:/pat // go to first line containing pat
:x;/pat // go to x and search for pat afterwards


# Changes
:changes  // show last changes
g;  // go back
g,  // go forward

# key-codes
:tab help key-codes
<C->  control
<S->  shift
<M-> alt or meta key
<Space>

# Put
p // after cursor
P // before cursor
10p // 10 times
Middle mouse; "*p // put c-c clipboard
]p  // put and indent

# Mouse
set mouse=a // activate mouse in all modes
opt/alt + selection // terminal selection
middle mouse  // insert

# Insert mode key bindings
<c-x> fnplo // extension
      s // spelling extension
<c-o> CMD   // command mode
<c-w> // delete left word
<c-h> // delete left character
<c-u> // delete until beginning of line
<c-j> // wrap line
<c-m> // wrap line
<c-d> // left indent <
<c-t> // right indent >
<c-r> i: insert from buffer 0 to command line

# Normal mode key bindings
<c-f> // scroll down page
<c-b> // scroll up page
<c-d> // scroll down block
<c-u> // scroll up block
<c-y> // scoll up single
<c-e> // scoll down single
<c-r> // redo change

# Scrolling
z.  // to middle
zt  // to top
zb  // to bottom
zh, zH, zl, zL, zs  // horizontally



# Working directory
:pwd  // show current working director
:cd // change working directory

# Windows newline carriage return
%s/<ctrl-v><ctrl-m>/\r/g

# Wrap text
set textwidth=80
gq
set colorcolumn=80  // 80
set cc=+1 // +1 after textwidth

# Encryption
:X  // enter key
:w  // write + encrypt
:set key= // disable encryption
:setlocal cm=zip  // weak, default
:setlocal cm=blowfish // strong

# Spell correction
]s  // next
z+  // correct
zg  // add to good list

# Installing bundles
vim +BundleInstall +qall

# Movements
()  // sentence
[z  // start of current open fold
]z  // end of current open fold
zjk // next, previous fold

# formatting
gq<motion>
gw<motion>
gqap  // format current paragraph
=<motion> // C-indenting; filter through external program
[p  // paste and reformat



# Delete characters
* dl, dh, dj, dk
* x, X


# Registers
* :reg  // display all registers
* :reg x  // display content of register x
* <C-r> x // paste in insert mode from register x

* A, B, C, D  // append to named register
* "": last used register
* 0: last yank register
" 1, 2, ...: last delete register

# Variables
let // show all variables
unlet a // unset variable
let a = 1
let @a = 1  // write to register
let $e = 1  // write to environment variable
let &o = 1  // write option

## Types
buffer-variable    b:     Local to the current buffer.                          
window-variable    w:     Local to the current window.                          
tabpage-variable   t:     Local to the current tab page.                        
global-variable    g:     Global.                                               
local-variable     l:     Local to a function.                                  
script-variable    s:     Local to a :source'ed Vim script.                     
function-argument  a:     Function argument (only inside a function).           
vim-variable       v:     Global, predefined by Vim.

# Options
set rtp+=~/.vim/bundle/plugin # extend runtime path

# Windows
## Opening
* s: split horizontally
* v: split vertically
## Navigation
* j k: down, up
* h l: left right
* t: top left
* b: bottom right
* p: previous
## Rotation
* r: rotate
* x: exchange
## Closing
* q: close
* o: close others
* z: close quickfix
## Preview window
* help preview
* :pedit file
* C-W z: close preview window
## location window
:lopen
:lclose
:lnext
## quickfix window
:copen
:close
:cnext

# Visual mode
* range: 
  * '<: start line
  * '>: end line
  * `<: start character
  * `>: end character
v // enter visual
V // select current line
ctrl-v  // select columns
gv  // last selection

# tags
identifier of function; stored in tag list (generated by ctags)
<C-]> // jump to tag under cursor
<C-}> // open tag in preview window
:tags // show tag stack; > is current position
<C-T> // previous tag
:pop  // previous tag
:tag  // next tag
<C-w ]> // open tag in window
<C-w }> // open tag in preview window
<C-w z> // close preview window

# Filtering
* :[range]!prog // filter range by program
* !!prog  // filter current line by program
* 3!!prog // filter next three lines by program

# Commands
:command Thelp tab help
:command -nargs=* Thelp tab help <args>
:cabbr th tab help  // abbreviate command

# Buffers
:ls, :buffers  // list buffers
:bnext, :bNext, :bprev // navigate
:bfirst, :blast
:sbnext, :sbprev  // split and navigate
:vertical sbnext  // split vertically
