# Array letters, characters
import string
list(string.letters[:10])

# Size objects/memory usage
sys.getsizeof(a)
a.nbytes  // numpy memory

# Special variables
__name__  == module name, if imported as module
__name__ == __main__, if executed as script
## input history
_i12, _iN
_i, _ii, _iii
_ih
## output history
_12, _N
_, __, ___
_oh

# scope information
dir() // all names in current scope
locals()  // dictionary of local variables
globals() // dictionary of global variables

# generators
* like iterators, but more efficients
* not all objects are kept in memory
* iteratable only once
for i in xrange(100)
squares = (x**2 for x in xrange(10))
for s in squares: // works
  print s
for s in squares: // does not work
  print s
## yield
def irange(n):
  i = 0
  while i < n:
    yield i   // jump to code of caller
    i = i + 1
for i in irange(10):
  yield jumps to this position

# References
b = a // only copies references -> same value
b = list(a) // copy value a
import copy;
b = copy.deepcopy(a)  // copy by value
b = copy.copy(a)  // shallow copy; members not copied
a == b  // compare values
a is b  // compare references

# Functions
def fun(a, b=1, *args, **kwargs):
  fun2(*args, **kwargs) // not fun2(args, kwargs)!
*args // list of unnamed args
**kwargs  // dict of names args


# Modules
import utils  // namespace utils
from utils import * // into current namespace
from utils import a as alias
## Reloading modules
%load_ext autoreload
%autoreload 2 // reload all but excluded modules
%autoreload 1 // reload only included modules
%aimport  // modules automatically imported
%aimport foo  // include foo
%aimport -foo // exclude foo
## Alternative
from IPython.lib.deepreload import reload; reload(module)

# Packages
* For structuring modules; avoiding name collisions
* Require __init__.py for being recognized as packages!
* package: contains modules
* modules: contains classes, functions
pkg/
  __init__.py // must exist, but can be empty
  __main__.py // optional, run by 'python pkg'
  spkg1/
    __init__.py
    module.py
  spkg2/
    __init__.py
    module.py
  module.py
import pkg.spkg1.module
import pkg.spkg2.module
import pkg.module
