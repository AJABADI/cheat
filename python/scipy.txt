# linalg
import scipy.linalg
solve(A, b)
eigvals, eigvecs = eig(A)
eigvals = eigvals(A)
svd(A)
cholesky(A)
LU(A)
norm(A, ord='fro')


# Sparse matrices
import scipy.sparse
efficient storage
fast matrix operations
## basics
lil_matrix  // list of lists; allows changes
csr_matrix  // compressed sparse row; constant
csc_matrix  // compressed sparse column; constant
coo_matrix  // coordinate form
s = X_matrix((nrow, ncol), dtype=)
s = X_matrix(np.array)  // from numpy array; 0 is interpreted as missing value
s[a != 10] = a[a != 10] // 10 is missing value
s.todense(), s.toarray()  // return dense numpy array
s.dot(s)  // sparse matrix operation
s.nnz, s.getnnz()  // number of stored (non zero) values
s.sorted_indices()  // indices of stored elements as sparse matrix

## lil_matrix: list of lists
+ fast modifications
- slow slicing
- slow operations
-> use for construction and convert to csr or csc afterwards

## csr_matrix: compressed sparse row
+ fast operations
+ fast row a[0, :] slicing
- slow modifications
- slow column splicing

## csc_matrix: compressed sparse column
+ fast column splicing

## coo_matrix: coordinate form
+ fast conversion to csr/csc
- no operations
- no slicing





# Optimization
import scipy.optimize
fmin_bfgs(fun, x0, fprime=fun_dev, ...)
  fun // function to be minimized
  x0  // starting point
  fprime  // derivative
  args  // arguments as tuple passed to fun and fun_dev
  disp=False  // suppress output
  full_output=True  // return [xmin, ymin, grad, ...]
brent(f)  // minimize scalar function
fminbound(f, x1, x2)  // minimize scalar function

# Interpolation
import scipy.interpolate
interp1d(x, y, kind='linear')
  kind='quadratic': spline^2
  kind='cubic': spline^3
