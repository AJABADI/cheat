# misc
http://nbviewer.ipython.org/github/koldunovn/py_klimacampus/blob/master/meeting_004/Seaborn.ipynb
load_dataset(name)
  iris
  flights // time series
  titanic
  exercise
  tips  // y=tip; x=mixed

# size, width, height
* for axes-aware functions: regplot, boxplot, kdeplot
* not: jointplot, lmplot, factorplot
plt.figure(figsize=(w, h))
sns.plot()
f, a = plt.subplots(figsize=(w, h))
sns.plot(ax=x)


# style
set_style(...)  // grid style
  'whitegrid'
  'darkgrid'
  'ticks'
with axes_style('whitegrid'): // change settings locally
set_context(...)  // size, colors
  'notebook'  // default
  'paper'
  'talk'
  'poster'
  font_scale=1.0
set(...)
  context='notebook'
  style='darkgrid'
  palette='hls'
  font_scale=1.0


# colors
cols = color_palette(name, length)
set_palette(name)
with sns.set_palette(...): // change locally
  ...
palplot()
choose_colorbrewer_palette(...)

## Default palettes
hls
muted
pastel
bright
dark

## Brewer palettes
choose_colorbrewer_palette(...)
  'sequential', 'divergent', 'qualitative'
Set1, Set2
RdBu, RdYlBu, RdYlGn

## Sequential colors
Reds, Greens, Blues, ...
GnBu, RdBu
X_r // reverse
X_d // dark

# Grids
## FacetGrid: facetting
* => Most relevant
g = FacetGrid(data, col='col_var', row='row_var', ...)
  hue='color_var'
  col_wrap=None // # columns
  size=3  // height of each grid in inches
  aspect // width = size * aspect
  xlim=[0, 1], ylim=
  legend_out=True // Draw legend outside
g.map(sns.pointplot, xvar, yvar, linewidth=3, marker='o', ms=6) // lineplot
g.add_legend()
g.savefig('plot.pdf')
g.axes[i, j] // matplotlib axes
g.axes[i, j].set(xlabel=, ylabel=)  // like matplotlib


## PairGrid: trellis plot
* one cell for every pair of variables x,y
* fun(x, y, ...)
g = PairGrid(data, ...)
  hue='color_var'
  vars=[selected variables]
  y_vars=[selected y variables]
  x_vars=[selected x variables]
  size=None
g.map(fun)
g.map_diag(fun)
g.map_offdiag(fun)
g.map_upper(fun)
g.map_lower(fun)
g.add_legend()

## JointGrid: two variables + marginals
g = JointGrid(x, y, ...)
  x // x variable
  y // y variable
  data=None // DataFrame
  size=None
g.plot(fun_joint, fun_marginals)
g.plot_joint(fun_joint, ...)
g.plot_marginals(fun_marginals, ...)


# boxplot
boxplot(data=, x=, y=, ...)
violinplot(data=, x=, y=, ...)

## boxplot with points
fig, ax = plt.subplots(figsize=(10, len(pa.anno.unique()) * 0.5));
sns.boxplot(y='anno', x='auc', data=pa, orient='h', order=pam.anno, ax=ax)
sns.stripplot(y='anno', x='auc', data=pa, orient='h', order=pam.anno) // add points
sns.boxplot(...)
  palette='Set1'  // fill boxes


# different plot types
violinplot(data, ...)
  * Use factorplot for facetting!
  data  // 2d numpy array or data.frame; columns == boxes
  (data.auc, data.group, ...) // x=data.group, y=data.auc
  vert=False  // horizontal
  order=  // order of boxes
  inner=points,sticks,box // plot sample values
  join_rm=True  // connect dots by lines
barplot(x, y, ...)
  data=
  hue=  // color
  orient=[h|v]
pointplot(x, y, ...)
  data=
  hue=  // color
corrplot(data, ...)
  method='pearson'
heatmap(data, ...)
  annot=False // print values in cells
  fmt='d|f' // annotation format
  cmap='RdBu_r'
clustermap(data, ...) // heatmap + dendrogram
  cmap='RdBu_r'
  col_cluster=True  // cluster columns
  row_cluster=True  // cluster rows
  col_colors= // column colors
  row_colors= // row colors
tsplot(data, ...) // plot time series with confidence (sample units)
  data
    data[units, timesteps, conditions]
      * 3d array
      * columns are time stamps
      * rows are sample units (variance line)
      * third dimension are conditions (different lines)
    data.columns[time, value, unit, condition] // tidy DataFrame
  time= // time column name (DataFrame)
  value= // value column name (DataFrame)
  unit= // unit column name (DataFrame)
  condition= // condition column name (DataFrame); name of conditions (array)
  color='hls' // colormap


# histogram / density plot
plt.hist(x) // matplotlib for simple histogram
kdeplot(x, shade=T, bw=)  // only kde
distplot(x, ...)  // hist + kde
  hist=True
  kde=True
  kde_kw={'shade', True}
jointplot(x='x', y='y', data=data)
  * 2d scatter plot with distributions at side
  kind='kde'


# regression
regplot(x, y, ...)
  * plotting linear regression
  * no hue=, cols=   <-> lmplot / factorplot
  data=None
  logistic=False
lmplot(x, y, data, ...) // x continuous
  col='col_var' // facet by column
  row='row_var' // facet by row
  hue='color_var'
  logistic=False  // logistic regression
  loess=False // loess fit
factorplot(x, y, ...) // x categorical
  data= // DataFrame
  col='col_var' // facet by column
  row='row_var' // facet by row
  hue='color_var'
  col_wrap=#columns
  kind='auto', 'box', 'bar', 'point'


# Lineplot
ax = sns.pointplot(data=, x=, y=, hue=, ...)
  linestyles=['-'] // styles for different hues; can not be variable!
ax.set(xlabel=, ylabel=) // changes labels

## Two lineplots side-by-side
grid = sns.FacetGrid(data=, col='dset', hue='output')
grid.map(sns.pointplot, 'x', 'y')
grid.axes[0, 0].set(xlabel=, ylabel)

Scatter plot
============
matplotlib
----------
fig, ax = plt.subplots(figsize=(8, 6))
scatter = ax.scatter(data[pc_x], data[pc_y], c=data['act_mean'], cmap='RdBu_r')
ax.set_xlabel(pc_x)
ax.set_ylabel(pc_y)
fig.colorbar(scatter)
if labels:
    for i, row in data.iterrows():
        ax.annotate('%d' % labels[i], xy=(row[pc_x], row[pc_y]))

lmplot
------
grid = lmplot(x='x', y='y', data=data, ...)
  fit_reg=False // no regression line
  hue='color'
  palette='RdBu' // color palette
  legend=False // not legend if hue
  size=5 // figure size
grid.ax // get axis

joint plot
----------
* does not support colors
jointplot(x='x', y='y', data=data, ...)
