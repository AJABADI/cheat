# references
* overview: http://matplotlib.org/contents.html
* pyplot: http://matplotlib.org/api/pyplot_api.html
* screenshots: http://matplotlib.org/users/screenshots.html

# matplotlib.pyplot
* stateful: remembers which operations were performed!
* import matplotlib.pyplot as plt
fig = figure()  // creates figures; optional
show(), savefig()
ax1 = subplot(211)  // create first subplot == axis; optional
ax2 = subplot(212)  // create second subplot == axis
fig, axes = subplots(nrows=, ncols=, figsize=(w,h))  // create figure and axes in one step
add_axes([left, bottom, width, height]) // create additional axes; [0;1] relative to figure
## GridSpec
import matplotlib.gridspec as gridspec
gs = gridspec.GridSpec(nrows=2, ncols=1, width_ratios=[1, 1], height_ratios=[2, 1])
plt.subplot(gs[0])
plt.subplot(gs[1])

## setting properties
title()
xlabel(), ylabel()
xlim(), ylim(), axis([xmin, xmax, ymin, ymax])
setp(line, linewidth=2, color='r')  // set property of line object
grid()

## plotting functions
plot(), scatter(), hist(), bar(), ...
text(), annotate()

# axes
line, = plot(x, y, ...)
  linewidth=1
  linestyle=[-,--,:,-.] // solid, dashed, dotted, dashdot
  color='red'
  marker=[osdx] // oval, square, diamond, x
  markersize=1
  markerfacecolor
  markeredgecolor
  markeredgewidth
  fontsize=18
scatter(x, y) // scatter plot
bar(x, y, width)  // barplot
imshow(image) // plot image (mxn array) values/heatmap
contour(x, y, z, color=, cmap=)  // contour plot
plot_surface(x, y, z, cmap=)  // from mpl_toolkits.mplot3d.axes3d import Axes3D
hist(x, bins=n, normed=False, cumulative=False)
vlines(x, vmin, vmax)
text(x, y, text, fontsize=12, ha='center', va='center', rotation=45, bbox=)


set_title('title')
set_xlabel('x')
set_ylabel('y')
set_xlim([start, end])
axis([xmin, xmax, ymin, ymax])
set_axis_off()  // turn axis off
grid()
legend(loc=0)

# axis properties
set_xlim
set_xscale('log')
set_xticks([1, 2, 3])
set_xticklabels(['A', 'B', 'C'])
xaxis.ticks_bottom()
ax.axis('off')  // remove all axis
ax.spines['top'].set_visible(False) // hide line

# text annotations
http://matplotlib.org/users/annotations_guide.html
text(x, y, text, size=, va='center', ha='center', rotation=45, bbox=)
annotate('text', xy=(x, y), xytext=(x, y), bbox=, arrowprops=, coords=)
  * coords=data|figure points|figure fraction|axes points|axes fraction|offset points

# coordinate transformations
* fig.transFigure // [0;1] of figure
* axis.transData  // [xlim, ylim] of data
* axis.transAxes  // [0;1] of axis
* text(x, y, transform=axis.transAxes)

## bbox
bbox=dict(boxstyle=, fc='cyan', ec='black', alpha=0.5, lw=2)
boxstyle=square|round|rarrow|larrow

## arrowprops
arrowstyle=->, -|>
linewidth



# colors
## default colors
'r', 'g', 'b', 'c', 'm', 'y'  // red, green, ...
'0.0', '0.5', '1.0' // black to white
(0.5, 0.5, 0.0) // 50% red + 50% green
'#ff0000' // red

## color maps
import matplotlib.cm as cm
cm.rainbow  // color map class
cm.get_cmap(rainbow)  == cm.rainbow // get color map class
cm.rainbow([0.0, 0.5, 1.0]) // map values in range [0;1] to rgb array
cm.datad.keys() // all colormaps, _r: reverse

### color maps mappers
norm = colors.Normalize(vmin, vmax) // Maps [vmin; vmax] -> [0.0, 1.0]
cm.ScalarMappable(norm=normalizer, map=colormap)  // Maps [vmin; vmax] -> [colmin; colmax]
cm.ScalarMappable(norm=colors.Normalize(min, max), map=cm.rainbow)

# MATLAB style
from pylab import *
figure()
subfigure(1, 2, 1)
plot(x, y, 'r--')
subfigure(1, 2, 2)
plot(x, y, 'g--')


# imshow
* plot 2d matrix in the way it is in memory (X[0,0] top/left)
* http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.imshow
imshow(M, interpolation='nearest', cmap=cm.RuBu, norm=norm,aspect='auto')
aspect='auto' // adjust width/height
## Adjusting scale
import matplotlib.colors as col
import matplotlib.cm as cm
norm = col.Normalize(vmin, vmax)
cmap = cm.jet
im = imshow(cmap=cmap, norm=norm)
## color bar
fig.colorbar(im, orientation='horizontal')
Don't know how to do specific for each axis



# Hiding box/frame

