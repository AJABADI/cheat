# list
l = [1, 'abc']
del l[i]      // delete by index
[1, 2] + [3] = [1, 2, 3]
[1, 2].extend([3]) = [1, 2, 3]
[1, 2].append([3]) = [1, 2, [3]]
l.pop(i)      // remove and return by index
l.remove(v)   // delete by value
l.index(v)    // index first v
v in l  // True if v is in l
l.sort()      // modifying
sorted(l)     // non-modifying
l.sort(key=lambda x: x[-1]  // apply function on element before comparison
l.sort(cmp=lambda x,y: x[-1] - y[-1]  // define comparison function
idx = sorted(range(len(a)), key=a.__getitem__)
l.reverse()   // modifying
reversed(l)   // non-modifying
map(f, list)  // applies f on each element
filter(f, list) // returns elements for which f returns True
reduce(lambda l, next: l.extend(next), list) // applies f on result and next element
zip([1, 2], [3, 4]) = [(1, 3), (2, 4)]
for i, value in enumerate(list):
  print '{0} {1}'.format(i, value)
index, value = min(enumerate(list), key=lambda x: x[1]) // which.min

# dict
d = {'a':1, 'b':2}
for key, value in d.iteritems():
for key, value in d.items():
for key in d.iterkeys():
for value in d.itervalues():

# Sets
unordered, immutable
s = {1, 2, 3}
s.add(3)
s.update({2, 3})
s.update([2, 3])
s.remove(10)
s.pop() // remove and return first element
x in s
s | t
s & t
len(s)
s = s & {1, 2, 3}
t = s.copy()

# Tuples
* sorted, immunable -> can be member of a set
t = (2, 3, 4)
t[0] = 4  // error
l = [1, 2, 3]
s = {l} // error
s = {t} // no error

# Strings
'{} is {} years old!'.format('Christof', 25)
'{name} is {age} years old!'.format(age=25, names='Christof')
'{}+{}={:.2f}'.format(1, 2, 3)
'{1} {0}'.format('Second', 'First')
'%s is %d years old' % ('Christof', 25)
'123'.isdigit() // check if str is numeric
## Quotes
s = "backslash \n is interpreted"
s = 'backslash \n is interpreted'
s = r'backslash not interpreted in raw strings'
s = '''hello 'world'!'''
s = """multiline string that can contain "quotes" """

# array
* like list, but restricts type
from array import *
a = array('f', [1.0, 2.1, 3.0])
c = array('c', 'Hello world')
'i, I': signed/unsigned integer
'l, L': signed/unsigned long
'f, F': signed/unsigned float
