# rmagic
%load_ext rpy2.ipython // new
%load_ext rmagic // old

%R a=1; b=2 // execute expr and return last assignment
%Rpush a  // push a from py ns to R ns
%R -i // == %Rpush a
%Rpull a  // pull a from R ns to py ns
%R -o a // == %Rpull a
%%R // start of multiline section -> alone in cell!

# library
from rpy2.robjects import r
r('CMD')  // execute R command
r.assign('target_name', object) // object -> R

## numpy
import rpy2.robject.numpy2ri // active conversion numpy arrays
r.assign('object', object)
r('save("object", file=)')

## pandas
import pandas.rpy2.common as com
com.load_data('object') // R object -> pandas object
df_r = com.convert_to_r_dataframe(df) // first convert df
r.assign('df', df_r) // then write it to R
r('saveRDS(df, file="file.rds")')




from rpy2.robjects import r
import pandas.rpy.common as com

def join_index(index, sep='_'):
    return [sep.join(x) for x in index.values]

def to_r(d):
    if d.columns.nlevels > 1:
        d = d.copy()
        d.columns = join_index(d.columns)
    d = d.reset_index()
    d = com.convert_to_r_dataframe(d)
    convert = r("""
    function(df) {
        data.frame(lapply(df, function(X) {
            if ("AsIs" %in% class(X))
                class(X) <- class(X)[-match("AsIs", class(X))]
            X
        }))
    }
""")
    d = convert(d)
    return d

def to_rds(d, filename):
    if type(d) is dict:
        r('d <- list()')
        for k, v in d.items():
            r.assign('dd', to_r(v))
            r('d$%s <- dd' % (k))
    else:
        r.assign('d', to_r(d))
    r("saveRDS(d, '%s')" % (filename))
