# doctests
1st way: from IPython console
import doctest
doctest.testfile('file.rst')
  * module_relative=False // if file is local

2nd way: as module
python -m doctest file.rst

## In Sphinx
1st way:
>>> print('Hello world')
'Hello way

2nd way:
.. doctest::

  >>> print('Hello world')
  'Hello world'


# flags
>>> code # doctest: +FLAG
>>> print(a) # doctest: +NORMALIZE_WHITESPACE // whitespace can have different different length; linebreaks
# doctest: +SKIP  // skip test

# References
https://pythonhosted.org/an_example_pypi_project/sphinx.html

# Initialization
sphinx-quickstart

# source/conf.py
sys.path.insert(0, os.path.abspath('../../mf'))
* NOTE: mf is now not a package, but a directory with modules
  * relative imports don't work
    import .module
    from pkg import module
  * solution?


# source/index.py
Table of contents
=================

.. toctree::
   :maxdepth: 2

   code
   page2
   page3


# source/code.py
Source code documentation
=========================

.. automodule:: exact_vbmf

.. autoclass:: VbMf
  :members:

.. automodule:: utils
  :members:

# Comamnds
.. toctree::  // generate table of contents
  :maxdepth: 2

  file  // file.rst
.. include:: abs_path.rst // include rst file


# autodoc
sphinx extension to import docstrings into rst files
.. automodule:: vbfa // import module docstring (at top of module file)
.. autoclass: vbfa.VbFa // import class docstring (after class VbFa)
  :members: // show all members
  :members: a, b  // show only a() and b()
  :private-members: // _private
  :special-members: // __init__


# rst
def add_ab(a, b):
    """
    Return the sum :math:`a + b` of two numbers.

    :math::
        \\text{sum} = 2 * \\frac{a + b}{2}

    :param int a: The first number
    :param int b: The second number
    :param noise: Noise matrix
    :type noise: :py.class:`np.ndarray`
    :returns: The sum of a and b
    :rtype: int
    :raises: nothing

    .. note::
        Sometimes the function :func:`sum_ab` in the module :mod:`numpy`, or class :class:`ndarray` is better.
        Use the **intersphinx** extension for references modules like :mod:`numpy` or `pickle`

    .. warning::
        Severe warning!

    Doctest - automatically tested!
    >>> add_ab(1, 2)
    3
    >>> add_ab(3, 4)
    7

    """

# Documenting constructor
Add following line to conf.py:
  autoclass_content = 'both'

# Intersphinx / cross-references
intersphinx_mapping = {'python': ('https://docs.python.org/3.5', None),
                       'numpy': ('http://docs.scipy.org/doc/numpy/', None),
                       'h5py' : ('http://docs.h5py.org/en/latest/', None),
                       'pandas': ('http://pandas.pydata.org/pandas-docs/stable', None)
                       }
:mod:`numpy`
:class:`numpy.ndarray`
:class:`pandas.DataFrame`
:func:`numpy.sum`
:meth:`numpy.ndarray.sum`
:attr:`numpy.ndarray.__attribute`

# numpydoc
http://codeandchaos.wordpress.com/2012/08/09/sphinx-and-numpydoc/
https://github.com/numpy/numpydoc
http://sphinxcontrib-napoleon.readthedocs.org/en/latest/example_numpy.html

# linking static files
## download single files
:download:`Download this file <dir/file.abc>` // will be copied to _downloads/file.abc

## linking files and directories
html_static_path = ['examples/']  // in conf.py; path relative to file.rst
`Link to static file <../_static/static_file.html>`_  // path relative in html dir
