# Logical operations

Misc
Python recursion limit: 1000
  sys.getrecursionlimit()
  sys.setrecursionlimit(x)

# dict
d = dict()
v = d.setdefault('k', [])
v.append('x1')
v = d.setdefault('k', [])
v.append('x2') // --> d['k'] = ['x1', 'x2']

# list
l.remove(value) // removes by value, not index!
l = l[1:] // remove first element
v = l.pop() // DELETES l[-1] and returns it

# Bit operations
-> Same as in C
~, |, &, <<, >>

# maximum integer
max_int = sys.maxsize
min_int = sys.maxsize

# string
char = word[i]  // read char
word[:i]  // prefix
!word[i] = 'c' // assignments not allowed!

# Sort by 2nd element
sorted(values, key=lambda x: x[1])

# Sets
s = set() // s = {} will create dict!
s.add(3) // not +!
s.union(s2) <=> s | s2 // not +!
s.difference(s2) <=> s - s2
s.intersection(s2) <=> s & s2

# Regex
m = match(p, t) // at beginning
m = search(p, t) // anywhere
m.group(0) // value of overall match
m.group(i) // value of group i
m.start() // start, FUNCTION
m.end() // end

# Genenerators / iterators
* Iterator is general concept
* Generator is one form (yield) of iterator
* Iterator: class with __iter__(self), __next__(self)
* Generator: yield

## Iterator
* As class:
  def __iter__(self):
   self.i = 0
   return self
  def __next__(self):
    if self.i == n:
      raise StopIteration()
    v = self.values[self.i]
    self.i += 1
    return v

## Generator
def myiter(n):
  i = 0
  while i < n:
    i += 1
    yield i

# Built-ins; duck typing
add o1 + o2 // o1, o2 can be anything, but class must have __add__
__add__(self, b) == a + b
__sub__(self, b) == a - b
__getitem__(self, i) == a[i]
__del__(self) == del a


# OO
## static
@staticmethod
def MakeInstance(self):

class Class:
 ptr = 0  // static variable

