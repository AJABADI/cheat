# General
gpylint path/file.py
  --help msg=C123
buildifier BUILD // format BUILD file
# pylint: disable=WARNING // ignore warnings

# Imports
from package import module
  long_name as short_name // if long name is too long
* Do not import functions, but only modules
* Use full path name
* Order
  Standard libs
  Third party libs
  Google libs
  Application specific libs
  -> Sort ABC withing each group

# Naming
package_name
module_name
ClassName
MethodName, functionName

ok: _, _private
no: __private // two underscores

# Strings
* Use format or % to concatenate strings
* + only for direct concat
* ok: 'Hello ' + ' world'
* no: 'Hello ' + x + ' world!'

# Exceptions
raise ValueError(value < 0, 'Value must be positive')
* Not: raise 'Error'
* Not: assert value < 0, 'Value must be positive' // assert only to verify correctness

# Misc
* No global variables
* [x**2 for x in xs] // comprehensions okay, if not too complicated
* Use default iterators if possible
    for k in dict: // yes
    for k in dict.keys(): // no
* f = lambda x: x**2 // lambdas okay
* x = 1 if a else 2 // conditional expressions okay
* def fun(a, b, c=3, d=4)
  * default arguments okay, if constant
  * Not: fun(a, b, c=flags.value, d=[])
* Evaluating empty elements None, 0, [], {}, ''
  * Use Python's implicit evaluation for False
    if sequence: // okay
    if len(sequence) > 0: // no
* Use list comprehensions instead of filter, map, reduce
  ok: [x for x in values if x > 1]
  no: filter(lambda x: x > 1, values]
* Nested functions are okay
* Properties for getters/setters okay
* @decorators okay, if they have a clear advantage
* 80 line length
  * Exceptions: long import, URLs
  * Not not use \ to separate lines
* Do not use cmd1; cmd2 to separate commands
* class MyClass(object):  // explicitly inherit from object
* # TODO(christofa): // add user to TODO comment
