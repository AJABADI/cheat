# Compression
gzfile(path) // decompresses file, if compressed
read.table(gzfile('file.csv.gz')) // read compressed file
read.table(gzfile('file.csv')) // also works for uncompressed files

# Table
read.table(filename, head=F, sep=" ", skip=0)
  head=T  // read header
  read.table(pipe('head file | cut -f 13-'))  // select columns
  stringsAsFactors=F  // T for avoiding automatic conversion chr to factor
read.csv()  // read.table with predefined parameters
write.table(x, file=, quote=T)
write.csv()

# File operations
getwd() // current working directory, pwd, cwd
setwd(path)
Sys.glob('../*.csv')  // glob, wildcard files
dir(dirname, ...) / list.files() // show directory content
  pattern='.csv$' // filter file names by regex; glob; wildcard
  full.names=T  // include dirname
list.dirs(path, full=T, recursive=T)
  full=F, recursive=F // only show names of dirs without .
file.show(file) // open file with vi
file.choose()
file.exists()
file.create()
file.remove()
file.info()
file.path('/root', 'filename')  // join paths and filename
basename(path)  // basename
dirname(path) // dirname
normalizePath(path) // absolute path; path must exist

## tools
library(tools)
file_ext(path)  // file.html -> html
file_path_sans_ext(path)  // file.html -> file
file_path_as_absolute(path) // absolute file path; file must exist

# Manual
readLines(file, n=) // read all lines from file/connection/url
readLines("http://...")
writeLines(lines, file=)
scan(file, n=, skip=, what=)
  - more complex than readLines
  - scan file for data or particular type (what=)
  - what="integer", "character", "raw", list("", "", "")
cat("Line1", "Line2", sep="\n", file=filename)

# excel, xlsx
* requires rJava
library(xlsx)
read.xlsx(file, sheet)  // slow
read.xlsx2(file, sheet) // fast


# matlab
library(R.matlab)
readMat(file)

# RDS
* single object
* filename can be different
saveRDS(d, filename)
d2 <- readRDS(filename)

# Execute comamnd
system(cmd, ...)
